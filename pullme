#!/usr/bin/env python

import yaml
import subprocess
import sys
import os
import re
import urllib2
import argparse

def main():
    settings = load_settings()
    outstanding_changes = subprocess.check_output(
                            ['git', 'status', '--porcelain'])
    if outstanding_changes:
        confirm_continue(settings)
    head_branch = determine_head_branch()
    push_to_personal(settings, head_branch)
    pull_target = determine_pull_target(settings)
    fork_path = determine_fork_path(settings)
    make_pull_request(fork_path, pull_target, head_branch)

def load_settings():
    settings = read_config_file('%s/.pullmeconfig' % os.environ['HOME'])
    settings.update(read_config_file('.pullmeconfig'))
    parser = argparse.ArgumentParser(
        description="""
Submit a pull request for the currently-checked-out branch. Particularly
targeted at working with long-running feature branches, pullme tries to guess
what branch you want your code pulled into. Contrast with Github's system of
defining a "base branch" and pointing all pull requests at that by default.
""",
        epilog="""
These options can also be set by writing yaml into ~/.pullmeconfig or
WORK_DIR/.pullmeconfig. In the case of a conflict, command-line options get
highest priority, then the work dir's config, and the config in your homedir
comes last.
"""
    )
    parser.add_argument('-o', '--origin', help='The remote-name for the repo '
                        "into which you want your code pulled. Defaults to "
                        "'origin'.")
    parser.add_argument('-p', '--personal-remote', help='the remote-name for '
                        'your fork on github. Defaults to $USER.')
    parser.add_argument('-a', '--assume', type=bool, help='Proceed on '
                        'assumptions without confirming them (LIKE A BOSS).')
    args = parser.parse_args()
    if args.origin is not None:
        settings['origin'] = args.origin
    if args.personal_remote is not None:
        settings['personal_remote'] = args.personal_remote
    if args.assume is not None:
        settings['assume'] = args.assume

    if not settings.get('origin'):
        settings['origin'] = 'origin'
    if not settings.get('personal_remote'):
        settings['personal_remote'] = os.environ['USER']
    if not settings.get('assume'):
        settings['assume'] = True
    return settings

def read_config_file(path):
    settings = None
    try:
        config_file = open(path)
        settings = yaml.load(config_file.read())
    except IOError, e:
        if e.errno != 2: #file not found
            raise e
    if not settings:
        settings = {} # an empty config will load() to None
    return settings

def confirm_continue(settings):
    if settings['assume']: return
    confirm = raw_input('There are outstanding changes. Continue? [Yn] ')
    if confirm.lower() == 'n':
        sys.exit(1)
    elif confirm and confirm.lower() != 'y':
        print "I don't know what you mean by '%s'" % confirm
        confirm_continue(settings)

def determine_head_branch():
    head_branch = subprocess.check_output(['git', 'name-rev',
                                        '--name-only', 'HEAD']).rstrip()
    return head_branch

def push_to_personal(settings, branch):
    remote = settings['personal_remote']
    correct = confirm_assumptions(settings,
        'Do you want to push to %s/%s?' % (remote, branch),
        'To what %s would you like to push? ',
        remote=settings['personal_remote'],
        branch=branch,
    )
    subprocess.check_call(['git', 'push', correct['remote'],
                            'HEAD:%s' % correct['branch']])

def confirm_assumptions(settings, confirm_message, correction_message, **kwargs):
    if settings['assume']: return kwargs
    confirm = raw_input('%s [Yn] ' % confirm_message)
    corrections = {}
    if confirm.lower() == 'n':
        for correction in kwargs:
            corrections[correction] = raw_input(correction_message % correction)
        return corrections
    elif confirm and confirm.lower() != 'y':
        print "I don't know what you mean by '%s'" % confirm
        confirm_assumptions(settings, confirm_message, define_message, **kwargs)
    else:
        return kwargs

def determine_pull_target(settings):
# look for the most recent reachable commit that has a corresponding ref name
# on origin, and return it.
    print 'looking for an appropriate pull request target branch'

# format:%d will show us all ref names for a commit.
# decorate=full ensures that we get refs/remotes in front of origin,
# insulating us from local branches that happen to have 'origin' in the name.
    command = "git log --decorate=full --pretty=format:%d"
    ref_names = subprocess.Popen([command], shell=True, stdout=subprocess.PIPE)

# Now we have a list of ref names that look something like this:
#
# (refs/remotes/origin/devel, refs/remotes/alorente/devel)
# (refs/remotes/origin/master)
#
# Git's rules on legal ref names are somewhat laxer than we might hope here.
# the name-terminating tokens, parens and commas, are both legal within names.
# This forces us into the rather awkward match you see below, rather than
# something like '([^,)]*)'. So it goes..
    remote = settings['origin']
    origin_ref_line = ''
    while not origin_ref_line and ref_names.poll() is None:
        line = ref_names.stdout.readline()
        if re.search('refs/remotes/%s' % remote, line):
            origin_ref_line = line.strip()
    ref_names.stdout.close()
    if ref_names.poll():
        sys.exit(ref_names.poll())
    del ref_names
    if not origin_ref_line:
        raise Exception('could not find any ref names at all on %s\n'
            '(perhaps you have no remote called that?)' % remote)
    extract_branch_name = r'.*refs/remotes/%s/(.*?)(?:\)$|, ).*' % remote
    pull_target = re.sub(extract_branch_name, r'\1', origin_ref_line)

    correct = confirm_assumptions(settings,
        'Do you want to submit a pull request to %s/%s?' %
                                            (remote, pull_target),
        'To what %s would you like to submit your request? ',
        branch=pull_target,
    )
    return correct['branch']

def determine_fork_path(settings):
# determine the path on github to the fork to which we're issuing a pull request
    remotes_info = subprocess.check_output(['git', 'remote', '-v']).split('\n')
    fork_url = filter(lambda x: re.search('fetch', x),
               filter(lambda x: re.search(settings['origin'], x),
               remotes_info))[0]
#now we have a thing that looks like
#origin git@github.com:emmadev/audience.git (fetch)
    fork_path = re.sub(r'.*github.com:(.*)\.git \(fetch\).*', r'\1', fork_url)
    return fork_path

def make_pull_request(fork_path, pull_target, head_branch):
#TODO
    title = 'Get my shiz'
    body = 'Get this shiz up in here'
    url = 'https://github.com/api/v2/json/pulls/%s' % fork_path
    data = '&'.join([
        'pull[base]=%s' % pull_target,
        'pull[head]=%s' % head_branch,
        'pull[title]=%s' % title,
        'pull[body]=%s' % body,
    ])
    request = urllib2.Request(url, data=data)
    urllib2.urlopen(request)

try:
    main()
except subprocess.CalledProcessError, e:
    sys.exit(e.returncode)


#TODO:
# * If the most recent reachable commit with a name on origin has multiple names
#         on origin, bail and ask for help
