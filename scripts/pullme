#!/usr/bin/env python

import yaml
import subprocess
import sys
import os
import re
import urllib2
import argparse
import tempfile
import json
import getpass
import base64

def main():
    settings = load_settings()
    outstanding_changes = subprocess.check_output(
                            ['git', 'status', '--porcelain'])
    if outstanding_changes:
        if not settings['assume']:
            subprocess.check_call(['git', 'status', '-s'])
        confirm_continue(settings, 'There are outstanding changes.')
    head_branch = determine_head_branch()
    push_to_personal(settings, head_branch)
    base_branch = determine_base_branch(settings)
    upstream_github_path = github_path_from_remote_name(settings['upstream'])
    personal_github_path = \
                    github_path_from_remote_name(settings['personal'])
    make_pull_request(settings, upstream_github_path,
                            personal_github_path, base_branch, head_branch)

def load_settings():
    main_config_path = '%s/.pullmeconfig' % os.environ['HOME']
    if not os.path.exists(main_config_path):
        establish_main_config(main_config_path)
    settings = read_config_file(main_config_path)
    settings.update(read_config_file('.pullmeconfig'))
    parser = argparse.ArgumentParser(
        description="""
Submit a pull request for the currently-checked-out branch. Particularly
targeted at working with long-running feature branches, pullme tries to guess
what branch you want your code pulled into. Contrast with Github's system of
defining a "base branch" and pointing all pull requests at that by default.
""",
        epilog="""
These options can also be set by writing yaml into ~/.pullmeconfig or
WORK_DIR/.pullmeconfig. In the case of a conflict, command-line options get
highest priority, then the work dir's config, and the config in your homedir
comes last.
"""
    )
    parser.add_argument('-u', '--upstream', help='The remote-name for the repo '
                        "into which you want your code pulled. Defaults to "
                        "'origin'.")
    parser.add_argument('-p', '--personal', help='the remote-name for '
                        'your fork on github. Defaults to $USER.')
    parser.add_argument('-a', '--assume', action='store_true', help='Proceed on '
                        'assumptions without confirming them (LIKE A BOSS).')
    args = parser.parse_args()
    if args.upstream is not None:
        settings['upstream'] = args.upstream
    if args.personal is not None:
        settings['personal'] = args.personal
    if args.assume is not None:
        settings['assume'] = args.assume

    if not settings.get('upstream'):
        settings['upstream'] = 'origin'
    if not settings.get('personal'):
        settings['personal'] = os.environ['USER']
    if not settings.get('assume'):
        settings['assume'] = False
    return settings

def establish_main_config(config_path):
    print 'Looks like this is your first run. We need to establish ' \
                                            'some initial settings...'

    descriptor, filename = tempfile.mkstemp()
    config_file = open(filename, 'w')
    print "First, enter your GitHub password (we'll infer your github username from your personal branch):"
    password = getpass.getpass()
    config_file.write("'password': '%s'" % password)
    config_file.close()
    os.rename(filename, config_path)

def read_config_file(path):
    settings = None
    try:
        config_file = open(path)
        settings = yaml.load(config_file.read())
    except IOError, e:
        if e.errno != 2: #file not found
            raise e
    if not settings:
        settings = {} # an empty config will load() to None
    return settings

def confirm_continue(settings, confirmation_message):
    if settings['assume']: return
    confirm = raw_input('%s Continue? [Yn] ' % confirmation_message)
    if confirm.lower() == 'n':
        sys.exit(1)
    elif confirm and confirm.lower() != 'y':
        print "I don't know what you mean by '%s'" % confirm
        confirm_continue(settings, confirmation_message)

def determine_head_branch():
    return subprocess.check_output(['git', 'name-rev',
                                        '--name-only', 'HEAD']).rstrip()

def push_to_personal(settings, branch):
    remote = settings['personal']
    correct = confirm_assumptions(settings,
        'Do you want to push to %s/%s?' % (remote, branch),
        'To what %s would you like to push? ',
        remote=settings['personal'],
        branch=branch,
    )
    subprocess.check_call(['git', 'push', correct['remote'],
                            'HEAD:%s' % correct['branch']])

def confirm_assumptions(settings, confirm_message, correction_message, **kwargs):
    if settings['assume']: return kwargs
    confirm = raw_input('%s [Yn] ' % confirm_message)
    corrections = {}
    if confirm.lower() == 'n':
        for correction in kwargs:
            corrections[correction] = raw_input(correction_message % correction)
        return corrections
    elif confirm and confirm.lower() != 'y':
        print "I don't know what you mean by '%s'" % confirm
        confirm_assumptions(settings, confirm_message, define_message, **kwargs)
    else:
        return kwargs

def determine_base_branch(settings):
# look for the most recent reachable commit that has a corresponding ref name
# on upstream, and return it.
    print 'looking for an appropriate base branch'

# format:%d will show us all ref names for a commit.
# decorate=full ensures that we get refs/remotes in front of upstream,
# insulating us from local branches that happen to have 'upstream' in the name.
    command = "git log --decorate=full --pretty=format:%d"
    ref_names = subprocess.Popen([command], shell=True, stdout=subprocess.PIPE)

    remote = settings['upstream']
    upstream_ref_line = ''
    while not upstream_ref_line and ref_names.poll() is None:
        line = ref_names.stdout.readline()
        if re.search('refs/remotes/%s' % remote, line):
            upstream_ref_line = line.strip()
    ref_names.stdout.close()
    if ref_names.poll():
        sys.exit(ref_names.poll())
    del ref_names
    if not upstream_ref_line:
        print "Could not automatically determine base branch. What branch should we use?"
        base_branch = raw_input("Branch: ")
    else:
# Now we have a list of ref names that look something like this:
#
# (refs/remotes/origin/devel, refs/remotes/alorente/devel)
# (refs/remotes/origin/master)
#
# Git's rules on legal ref names are somewhat laxer than we might hope here.
# the name-terminating tokens, parens and commas, are both legal within names.
# This forces us into the rather awkward match you see below, rather than
# something like '([^,)]*)'. So it goes..
        extract_branch_name = r'.*refs/remotes/%s/(.*?)(?:\)$|, ).*' % remote
        base_branch = re.sub(extract_branch_name, r'\1', upstream_ref_line)

    correct = confirm_assumptions(settings,
        'Do you want to submit a pull request to %s/%s?' %
                                            (remote, base_branch),
        'To what %s would you like to submit your request? ',
        branch=base_branch,
    )
    return correct['branch']

def github_path_from_remote_name(remote):
    remotes_info = subprocess.check_output(['git', 'remote', '-v']).split('\n')
    fork_url = filter(lambda x: re.search('fetch', x),
               filter(lambda x: re.search(remote, x),
               remotes_info))[0]
#now we have a thing that looks like
#origin git@github.com:emmadev/audience.git (fetch)
    return re.sub(r'.*github.com[:/](.*)\.git \(fetch\).*', r'\1', fork_url)

def make_pull_request(settings, upstream_github_path,
                    personal_github_path, base_branch, head_branch):
    title, body = get_description_from_editor(settings, base_branch)
    url = 'https://api.github.com/repos/%s/pulls' % upstream_github_path
    print 'pulling to %s' % url
    username = personal_github_path.split('/')[0]
    data = json.dumps({
        'title': title,
        'body': body,
        'head': '%s:%s' % (username, head_branch),
        'base': base_branch,
    })
    request = urllib2.Request(url, data=data)
    auth = base64.b64encode('%s:%s' % (username, settings['password']))
    request.add_header('Authorization', 'Basic %s' % auth)
    try:
        response = json.loads(urllib2.urlopen(request).read())
        print "Successfully opened pull request #%s" % response['number']
        print response['html_url']
    except urllib2.HTTPError, e:
        error = json.loads(e.read())
        sys.stderr.write("Pull request failed:\n")
        sys.stderr.write(error['message'] + "\n")
        for sub_error in error['errors']:
            sys.stderr.write(sub_error['message'] + "\n")

def get_description_from_editor(settings, base_branch, filename=None):
    if not filename:
        descriptor, filename = tempfile.mkstemp()
        pull_message_file = open(filename, 'w')
        pull_message_file.write("""


#put your pull request message here.
#As with a git commit message, the first line is the title, then there is a
#blank line, and any subsequent lines are description.
#lines starting with a hash are comments.
#commits in this pull:
#
""")
        status = subprocess.Popen(['git', 'log', '--oneline', '--reverse', '%s/%s..'
                        % (settings['upstream'], base_branch)],
                        stdout=subprocess.PIPE)
        for line in status.stdout:
            pull_message_file.write("#" + line)
        pull_message_file.flush()
        pull_message_file.close()

    editor = os.environ.get('EDITOR', '/bin/ed')
    subprocess.check_call([editor, filename])

    pull_message_file = open(filename, 'r')
    title = pull_message_file.readline().strip()
    pull_message_file.readline()
    body = ''
    for line in pull_message_file:
        if re.match('^[^#]', line):
            body += line.rstrip() + "\n"
    body = body.rstrip()

    pull_message_file.close()

    if not title:
        confirm_continue(settings, "I couldn't find a pull request title.")
        return get_description_from_editor(settings, base_branch, filename=filename)

    os.unlink(filename)
    return title, body

try:
    main()
except subprocess.CalledProcessError, e:
    sys.exit(e.returncode)
